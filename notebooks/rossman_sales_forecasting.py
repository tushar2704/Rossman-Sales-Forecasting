# -*- coding: utf-8 -*-
"""Rossman Sales Forecasting

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QG2vpi3UPAUdMTy74Gi8FWuTDp_sQocZ

# Rossman Sales Forecasting
## Author github.com/tushar2704

#Table of contents
>[Import libraries](#scrollTo=F3FERy0ipRMz)

>[Reading data](#scrollTo=NUtKBiSDpTVO)

>[EDA](#scrollTo=kNzFdXA-pXlz)

>[Tranining model](#scrollTo=_9XBkSL3pfeM)

# Import libraries

Importing libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import datetime

"""# Reading data

Reading data from CSV file
"""

sales_train_df = pd.read_csv('/content/data.csv')

sales_train_df.shape

"""Printing the first 5 rows"""

sales_train_df.head()

"""Printing the unique value of `DayOfWeek` column

# EDA
"""

sales_train_df['DayOfWeek'].unique()

"""Printing the unique value of `Open` column"""

sales_train_df['Open'].unique()

"""Printing the unique value of `Promo` column"""

sales_train_df['Promo'].unique()

"""Printing the unique value of `StateHoliday` column"""

sales_train_df['StateHoliday'].unique()

"""Printing the unique value of `SchoolHoliday` column"""

sales_train_df['SchoolHoliday'].unique()

sales_train_df.tail()

"""Printing the information of data frame"""

sales_train_df.info()

"""Printing the description of data frame"""

sales_train_df.describe()

store_info_df = pd.read_csv('/content/store.csv')

store_info_df.shape

store_info_df.head()

store_info_df.info()

store_info_df.describe()

"""The code uses Seaborn's 'heatmap' function to create a visual representation of missing (NaN) values in the 'sales_train_df' DataFrame. It displays a color-coded heatmap where missing values are represented by a different color, helping to identify the presence and distribution of missing data in the DataFrame.





"""

sns.heatmap(sales_train_df.isnull());

sales_train_df.isnull().sum()

"""The code generates histograms for each numerical column in the 'sales_train_df' DataFrame with 30 bins and a red color. The histograms are displayed in a 20x20 figure size, providing an overview of the distribution of each numerical feature.





"""

sales_train_df.hist(bins = 30, figsize=(20, 20), color = 'r')

sales_train_df['Customers'].max()

"""The code creates two new DataFrames: 'closed_train_df' containing rows from 'sales_train_df' where the 'Open' column value is 0, and 'open_train_df' containing rows where the 'Open' column value is 1. This separation is based on whether the stores were closed or open during the recorded sales data.






"""

closed_train_df = sales_train_df[sales_train_df['Open'] == 0]
open_train_df = sales_train_df[sales_train_df['Open'] == 1]

print('Total = ', len(sales_train_df))
print('Número de lojas/dias fechado = ', len(closed_train_df))
print('Número de lojas/dias aberto = ', len(open_train_df))

172817 / len(store_info_df)

closed_train_df.head()

"""The code filters the 'sales_train_df' DataFrame, keeping only the rows where the 'Open' column value is 1. This operation retains data only for the time periods when the stores were open.





"""

sales_train_df = sales_train_df[sales_train_df['Open'] == 1]

sales_train_df.shape

sales_train_df

"""The code drops the 'Open' column from the 'sales_train_df' DataFrame in place, removing the column from the DataFrame permanently.





"""

sales_train_df.drop(['Open'], axis = 1, inplace=True)

sales_train_df.head()

sales_train_df.describe()

"""The code uses Seaborn's 'heatmap' function to create a visual representation of missing (NaN) values in the 'store_info_df' DataFrame. It displays a color-coded heatmap without the color bar, showing the locations of missing data in the DataFrame.





"""

sns.heatmap(store_info_df.isnull(), cbar=False);

"""The code filters the 'store_info_df' DataFrame to only show rows where the 'CompetitionDistance' column contains missing (NaN) values. This operation displays the rows where the 'CompetitionDistance' information is not available.





"""

store_info_df[store_info_df['CompetitionDistance'].isnull()]

"""The code filters the 'store_info_df' DataFrame to only show rows where the 'CompetitionOpenSinceMonth' column contains missing (NaN) values. This operation displays the rows where the information about when the competition opened for the store is not available.





"""

store_info_df[store_info_df['CompetitionOpenSinceMonth'].isnull()]

"""The code filters the 'store_info_df' DataFrame to only show rows where the 'CompetitionOpenSinceYear' column contains missing (NaN) values. This operation displays the rows where the information about the year when the competition opened for the store is not available.





"""

store_info_df[store_info_df['CompetitionOpenSinceYear'].isnull()]

"""The code filters the 'store_info_df' DataFrame to only show rows where the 'Promo2' column has a value of 0. This operation displays the rows where the store does not participate in Promo2 (a specific promotional activity).





"""

store_info_df[store_info_df['Promo2'] == 0]

"""The code fills missing (NaN) values in the specified string columns ('Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval', 'CompetitionOpenSinceYear', 'CompetitionOpenSinceMonth') of the 'store_info_df' DataFrame with the value 0, modifying the DataFrame in place.





"""

str_cols = ['Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval',
            'CompetitionOpenSinceYear', 'CompetitionOpenSinceMonth']
for str in str_cols:
  store_info_df[str].fillna(0, inplace=True)

"""The code uses Seaborn's 'heatmap' function to create a visual representation of missing (NaN) values in the 'store_info_df' DataFrame. It displays a color-coded heatmap without the color bar, showing the locations of missing data in the DataFrame.





"""

sns.heatmap(store_info_df.isnull(), cbar = False);

"""The code fills the missing (NaN) values in the 'CompetitionDistance' column of the 'store_info_df' DataFrame with the mean value of the non-missing data in the same column. The DataFrame is modified in place with the updated values.





"""

store_info_df['CompetitionDistance'].fillna(store_info_df['CompetitionDistance'].mean(), inplace = True)

"""The code uses Seaborn's 'heatmap' function to create a visual representation of missing (NaN) values in the 'store_info_df' DataFrame. It displays a color-coded heatmap without the color bar, showing the locations of missing data in the DataFrame.





"""

sns.heatmap(store_info_df.isnull(), cbar = False);

"""The code generates histograms for each numerical column in the 'store_info_df' DataFrame with 30 bins and a red color. The histograms are displayed in a 20x20 figure size, providing an overview of the distribution of each numerical feature.





"""

store_info_df.hist(bins = 30, figsize=(20,20), color = 'r')

sales_train_df.head()

store_info_df.head()

"""The code performs an inner join on the 'sales_train_df' and 'store_info_df' DataFrames based on the common 'Store' column, creating a new DataFrame 'sales_train_all_df' that combines the sales data and store information. The resulting DataFrame contains only the rows where there is a match between 'Store' columns in both DataFrames.





"""

sales_train_all_df = pd.merge(sales_train_df, store_info_df, how = 'inner', on = 'Store')

sales_train_all_df.shape

sales_train_all_df.tail()

"""The code calculates the correlation matrix for the 'sales_train_all_df' DataFrame, representing the pairwise correlations between its numerical columns. It then creates a heatmap using Seaborn's 'heatmap' function to visualize these correlations, annotating the heatmap with the correlation values. The figure size is set to 20x20 for better visibility.





"""

correlations = sales_train_all_df.corr()
f, ax = plt.subplots(figsize=(20,20))
sns.heatmap(correlations, annot = True);

"""The code computes the correlation of the 'Sales' column with all other columns in the 'sales_train_all_df' DataFrame and then sorts the correlations in ascending order. It displays the correlations, showing the strength and direction of the relationship between the 'Sales' column and each other column in the DataFrame.





"""

correlations = sales_train_all_df.corr()['Sales'].sort_values()
correlations

"""The code extracts the year from the 'Date' column in the 'sales_train_all_df' DataFrame and creates a new column named 'Year' to store these year values. This operation allows for easier analysis and grouping of data based on the year of the sales transactions.





"""

sales_train_all_df['Year'] = pd.DatetimeIndex(sales_train_all_df['Date']).year

sales_train_all_df.head()

"""The code extracts the month and day from the 'Date' column in the 'sales_train_all_df' DataFrame and creates two new columns named 'Month' and 'Day' to store these values, respectively. This operation facilitates further analysis and grouping of data based on the month and day of the sales transactions.





"""

sales_train_all_df['Month'] = pd.DatetimeIndex(sales_train_all_df['Date']).month
sales_train_all_df['Day'] = pd.DatetimeIndex(sales_train_all_df['Date']).day

sales_train_all_df.head()

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'Month' column, calculates the average sales for each month, and then plots these average sales values against the months. It creates a line plot with red markers and sets the title of the plot as 'Média de vendas por mês' (Mean sales per month).





"""

axis = sales_train_all_df.groupby('Month')[['Sales']].mean().plot(figsize = (10,5), marker = 'o', color = 'r')
axis.set_title('Média de vendas por mês')

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'Month' column, calculates the average number of customers for each month, and then plots these average customer values against the months. It creates a line plot with blue triangles as markers and sets the title of the plot as 'Média de clientes por mês' (Mean customers per month).





"""

axis = sales_train_all_df.groupby('Month')[['Customers']].mean().plot(figsize = (10,5), marker = '^', color = 'b')
axis.set_title('Média de clientes por mês')

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'Day' column, calculates the average sales for each day, and then plots these average sales values against the days. It creates a line plot with red markers and sets the title of the plot as 'Média de vendas por dia' (Mean sales per day).





"""

axis = sales_train_all_df.groupby('Day')[['Sales']].mean().plot(figsize = (10,5), marker = 'o', color = 'r')
axis.set_title('Média de vendas por dia')

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'Day' column, calculates the average number of customers for each day, and then plots these average customer values against the days. It creates a line plot with blue triangles as markers and sets the title of the plot as 'Média de clientes por dia' (Mean customers per day).





"""

axis = sales_train_all_df.groupby('Day')[['Customers']].mean().plot(figsize = (10,5), marker = '^', color = 'b')
axis.set_title('Média de clientes por dia')

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'DayOfWeek' column, calculates the average sales for each day of the week, and then plots these average sales values against the days of the week. It creates a line plot with red markers and sets the title of the plot as 'Média de vendas por dia da semana' (Mean sales per day of the week).





"""

axis = sales_train_all_df.groupby('DayOfWeek')[['Sales']].mean().plot(figsize = (10,5), marker = 'o', color = 'r')
axis.set_title('Média de vendas por dia da semana')

"""The code groups the data in the 'sales_train_all_df' DataFrame by the 'DayOfWeek' column, calculates the average number of customers for each day of the week, and then plots these average customer values against the days of the week. It creates a line plot with blue triangles as markers and sets the title of the plot as 'Média de clientes por dia da semana' (Mean customers per day of the week).





"""

axis = sales_train_all_df.groupby('DayOfWeek')[['Customers']].mean().plot(figsize = (10,5), marker = '^', color = 'b')
axis.set_title('Média de clientes por dia da semana')

"""The code creates a plot using the 'matplotlib' library to visualize the average sales ('Sales') for each date, grouped by the different store types ('StoreType') in the 'sales_train_all_df' DataFrame. The resulting plot displays the trend of sales for each store type over time.





"""

fig, ax = plt.subplots(figsize = (20,10))
sales_train_all_df.groupby(['Date', 'StoreType']).mean()['Sales'].unstack().plot(ax = ax)

"""The code uses Seaborn's 'barplot' function to create a bar plot that shows the average sales ('Sales') for each value of the 'Promo' column in the 'sales_train_all_df' DataFrame. The plot provides a visual comparison of the average sales with and without promotions.





"""

sns.barplot(x = 'Promo', y = 'Sales', data = sales_train_all_df);

"""This code uses Seaborn to create a bar plot, where the x-axis represents the 'Promo' variable and the y-axis represents the 'Customers' variable from the 'sales_train_all_df' dataset. The plot shows the average number of customers for each promo category.





"""

sns.barplot(x = 'Promo', y = 'Customers', data = sales_train_all_df);

"""## Treinamento do modelo - parte 1"""

!pip install prophet

from prophet import Prophet

"""This code defines a function called sales_prediction that takes a store ID, sales data, and the number of forecast periods as input. It uses the Facebook Prophet library to fit a time series model to the sales data, make future predictions, and then plots the forecast and its components (trend, seasonality, and holidays). The function returns the original sales data and the forecast.

#Tranining model
"""

# Date: ds
# Sales: y
def sales_prediction(store_id, sales_df, periods):
  sales_df = sales_df[sales_df['Store'] == store_id]
  sales_df = sales_df[['Date', 'Sales']].rename(columns = {'Date': 'ds', 'Sales': 'y'})
  sales_df = sales_df.sort_values(by = 'ds')

  model = Prophet()
  model.fit(sales_df)
  future = model.make_future_dataframe(periods = periods)
  forecast = model.predict(future)
  figure1 = model.plot(forecast, xlabel = 'Data', ylabel = 'Vendas')
  figure2 = model.plot_components(forecast)

  return sales_df, forecast

"""This code calls the sales_prediction function with the store ID 10, the sales data sales_train_all_df, and 60 periods to forecast. It stores the original sales data in df_origin and the forecast results in df_prediction.





"""

df_origin, df_prediction = sales_prediction(10, sales_train_all_df, 60)

df_origin.shape, df_prediction.shape

df_prediction.head()

df_prediction.tail(60)

df_prediction.tail(60).to_csv('previsoes_vendas.csv')

df_origin.tail()

"""This code is an updated version of the previous sales_prediction function, which now accepts an additional parameter holidays. It uses the Prophet library to forecast sales for a specific store (given by store_id) based on the sales data sales_df and considering the specified holidays. The original sales data is stored in sales_df, and the forecast results are stored in forecast.





"""

def sales_prediction(store_id, sales_df, holidays, periods):
  sales_df = sales_df[sales_df['Store'] == store_id]
  sales_df = sales_df[['Date', 'Sales']].rename(columns = {'Date': 'ds', 'Sales': 'y'})
  sales_df = sales_df.sort_values(by = 'ds')

  model = Prophet(holidays=holidays)
  model.fit(sales_df)
  future = model.make_future_dataframe(periods = periods)
  forecast = model.predict(future)
  figure1 = model.plot(forecast, xlabel = 'Data', ylabel = 'Vendas')
  figure2 = model.plot_components(forecast)

  return sales_df, forecast

sales_train_all_df.head()

"""This code filters the rows in the sales_train_all_df DataFrame where SchoolHoliday is equal to 1, then selects only the Date column values for those rows and stores them in the school_holidays array. The .shape attribute is used to get the shape (number of elements) of the school_holidays array.





"""

school_holidays = sales_train_all_df[sales_train_all_df['SchoolHoliday'] == 1].loc[:, 'Date'].values
school_holidays.shape

school_holidays

len(np.unique(school_holidays))

"""This code filters the rows in the sales_train_all_df DataFrame where the StateHoliday column has values 'a', 'b', or 'c', then selects only the Date column values for those rows and stores them in the state_holidays array.





"""

state_holidays = sales_train_all_df[(sales_train_all_df['StateHoliday'] == 'a') |
                                    (sales_train_all_df['StateHoliday'] == 'b') |
                                    (sales_train_all_df['StateHoliday'] == 'c')].loc[:,'Date'].values

state_holidays.shape

len(np.unique(state_holidays))

"""This code converts the state_holidays array of dates into a DataFrame with a 'ds' column containing the dates as datetime objects and a 'holiday' column with the value 'state_holiday' for each row. The resulting DataFrame is then displayed.





"""

state_holidays = pd.DataFrame({'ds': pd.to_datetime(state_holidays),
                               'holiday': 'state_holiday'})
state_holidays

"""This code converts the school_holidays array of dates into a DataFrame with a 'ds' column containing the dates as datetime objects and a 'holiday' column with the value 'school_holiday' for each row. The resulting DataFrame is then displayed.





"""

school_holidays = pd.DataFrame({'ds': pd.to_datetime(school_holidays),
                               'holiday': 'school_holiday'})
school_holidays

"""This code concatenates the state_holidays and school_holidays DataFrames vertically into a new DataFrame called school_state_holidays.





"""

school_state_holidays = pd.concat((state_holidays, school_holidays))
school_state_holidays

"""This code uses the sales_prediction function to forecast sales for store_id=10 in the sales_train_all_df DataFrame, considering school_state_holidays as holidays, and predicting sales for the next 5 periods. The original sales data is stored in df_original, and the forecasted results are stored in df_prediction.





"""

df_original, df_prediction = sales_prediction(10, sales_train_all_df, school_state_holidays, 5)

df_prediction.head()